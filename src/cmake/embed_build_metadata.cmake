include(GetGitRevisionDescription REQUIRED) # https://stackoverflow.com/a/4318642/13933174
git_describe_working_tree(GIT_DESC) # define GIT_DESC

# can also change target name if desired
macro(append_version_to_target TARGET_NAME)
    get_target_property(TARGET_TYPE ${TARGET_NAME} TYPE)
    if (TARGET_TYPE STREQUAL "SHARED_LIBRARY")
        set_target_properties(${TARGET_NAME}
            PROPERTIES
            VERSION ${CMAKE_PROJECT_VERSION}
        )
    else()
        if (NOT DEFINED ${TARGET_OUTPUT_NAME})
            set(TARGET_OUTPUT_NAME ${TARGET_NAME})
        endif ()

        set_target_properties(${TARGET_NAME}
            PROPERTIES OUTPUT_NAME ${TARGET_OUTPUT_NAME}-${CMAKE_PROJECT_VERSION}
        )
    endif()
endmacro()

# gets data and add to autogenerated file/library
macro(get_build_metadata CMAKE_BUILD_DATA)
    # create the initial file
    set(BUILD_METADATA ${CMAKE_CURRENT_BINARY_DIR}/build_metadata)
    file(WRITE ${BUILD_METADATA} "")

    # copy additional build flags
    foreach(var ${CMAKE_BUILD_DATA})
    if (DEFINED "${var}" AND NOT "${${var}}" STREQUAL "OFF")
        list(APPEND BUILD_FLAGS "${var}:${${var}}")
    endif ()
    endforeach(var)
    file(APPEND ${BUILD_METADATA} "BUILD_FLAGS=${BUILD_FLAGS}\n")

    # the build time/date
    string(TIMESTAMP BUILD_TIMESTAMP "+%H:%M:%S %d %m %Y")
    file(APPEND ${BUILD_METADATA} "BUILD_TIMESTAMP=${BUILD_TIMESTAMP}\n")

    # cmake project version
    file(APPEND ${BUILD_METADATA} "VERSION=${CMAKE_PROJECT_VERSION}\n")

    # the commit's branch
    execute_process(COMMAND
        ${GIT_EXECUTABLE} rev-parse --abbrev-ref HEAD
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        OUTPUT_VARIABLE GIT_BRANCH
        ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    file(APPEND ${BUILD_METADATA} "GIT_BRANCH=${GIT_BRANCH}\n")

    # git commit commit id
    execute_process(COMMAND
        ${GIT_EXECUTABLE} describe --match=NeVeRmAtCh --always --abbrev=40 --dirty
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        OUTPUT_VARIABLE GIT_COMMIT
        ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    file(APPEND ${BUILD_METADATA} "GIT_COMMIT=${GIT_COMMIT}\n")

    # the date of the commit
    execute_process(COMMAND
        ${GIT_EXECUTABLE} log -1 --format=%ad --date=local
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        OUTPUT_VARIABLE GIT_DATE
        ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    file(APPEND ${BUILD_METADATA} "GIT_DATE=${GIT_DATE}\n")

    # the subject of the commit
    execute_process(COMMAND
        ${GIT_EXECUTABLE} log -1 --format=%s
        WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}
        OUTPUT_VARIABLE GIT_COMMIT_SUBJECT
        ERROR_QUIET OUTPUT_STRIP_TRAILING_WHITESPACE
    )
    file(APPEND ${BUILD_METADATA} "GIT_COMMIT_SUBJECT=${GIT_COMMIT_SUBJECT}\n")

endmacro()

# adds a new text section the binary file called ".metadata" which stores the builds metadata
macro(embed_build_metadata TARGET_NAME)
    # add metadata to executables
    get_target_property(TYPE ${TARGET_NAME} TYPE)
    if (${TYPE} STREQUAL "EXECUTABLE")
        if (CMAKE_OBJCOPY)
            add_custom_command(TARGET ${TARGET_NAME} POST_BUILD
                COMMAND ${CMAKE_OBJCOPY} --add-section .metadata=${BUILD_METADATA} $<TARGET_FILE:${TARGET_NAME}>
                COMMENT "Adding build metadata section to the executable ${TARGET_NAME}"
            )
        else ()
            message(FATAL_ERROR "Objdump not found!")
        endif ()
    endif()
endmacro()

# adds the metadata section to the binary
# appends cmake project version to the binary
# todo: add capability to remove debug symbols into seperate file
# todo: move to install location
macro(finalize_binary TARGET)
    embed_build_metadata(${TARGET})
    append_version_to_target(${TARGET})
endmacro()
